name: Statping build
on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  data:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.statping-versions.outputs.is_release }}
      is_prerelease: ${{ steps.statping-versions.outputs.is_prerelease }}
      version: ${{ steps.statping-versions.outputs.version }}
      go_version: ${{ steps.tool-versions.outputs.go_version }}
      node_version: ${{ steps.tool-versions.outputs.node_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get statping version information
        id: statping-versions
        run: |
          STABLE_TAG=$(git describe --tags --exclude '*-*')
          BETA_TAG=$(git describe --tags --match '*-*')
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          echo "beta_tag=$BETA_TAG" >> $GITHUB_OUTPUT
          if [ "${{ github.ref }}" = "refs/tags/$STABLE_TAG" ]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "version=$STABLE_TAG" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/tags/$BETA_TAG" ]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "version=$BETA_TAG" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "version=$STABLE_TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: get go/node version information
        id: tool-versions
        run: |
          echo "go_version=1.20.x" >> $GITHUB_OUTPUT
          echo "node_version=16.14.0" >> $GITHUB_OUTPUT
        shell: bash

  frontend:
    runs-on: ubuntu-latest
    needs: data
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.data.outputs.go_version }}
      - name: Install rice
        run: go install github.com/GeertJohan/go.rice/rice@latest
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ needs.data.outputs.node_version }}
      - name: Download Frontend Dependencies
        working-directory: ./frontend
        run: yarn
      - name: Build Frontend Statping
        working-directory: ./frontend
        run: yarn build
      - name: Copy built frontend
        run: |
          cp -r frontend/dist source/
          cp -r frontend/src/assets/scss source/dist/
          cp frontend/public/robots.txt source/dist/
      - name: Build rice-box.go
        run: rice embed-go
        working-directory: source
      - name: Upload Compiled Frontend (rice-box.go)
        uses: actions/upload-artifact@v1
        with:
          name: static-rice-box
          path: ./source

  build:
    needs: [ data, frontend ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ linux ]
        arch: [ 386, amd64, arm-7, arm-6, arm64 ]
        include:
          - platform: darwin
            arch: amd64
          - platform: darwin
            arch: arm64
          - platform: windows
            arch: amd64
          - platform: windows
            arch: 386

    steps:
      - uses: actions/checkout@v2
      - name: Download Compiled Frontend (rice-box.go)
        uses: actions/download-artifact@v1
        with:
          name: static-rice-box
          path: ./source
      - name: Set Linux Build Flags
        if: matrix.platform == 'linux'
        run: |
          echo "BUILD_FLAGS=-extldflags -static" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo linux sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash
      - name: Set Darwin Build Flags
        if: matrix.platform == 'darwin'
        run: |
          echo "XGO_TAGS=netgo osusergo darwin sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash
      - name: Set Windows Build Flags
        if: matrix.platform == 'windows'
        run: |
          echo "BUILD_FLAGS=-extldflags -static -buildmode=exe" >> $GITHUB_ENV
          echo "XGO_TAGS=netgo osusergo sqlite_omit_load_extension" >> $GITHUB_ENV
        shell: bash
      - name: Build ${{ matrix.platform }}/${{ matrix.arch }}
        uses: crazy-max/ghaction-xgo@v2
        with:
          xgo_version: latest
          go_version: ${{ needs.data.outputs.go_version }}
          dest: build
          prefix: statping
          targets: ${{ matrix.platform }}/${{ matrix.arch }}
          v: true
          x: true
          pkg: cmd
          buildmode: pie
          tags: ${{ env.XGO_TAGS }}
          ldflags: -s -w -X main.VERSION=${{ needs.data.outputs.version }} -X main.COMMIT=${{ github.sha }} ${{ env.BUILD_FLAGS }}
      - run: ls -la build
      - name: Upload Compiled Statping Binary
        uses: actions/upload-artifact@v1
        with:
          name: binaries
          path: ./build

  release:
    if: ${{ success() && fromJSON(needs.data.outputs.is_release) }}
    needs: [ data, build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: binaries
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: binaries/*
          draft: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          prerelease: ${{ fromJSON(needs.data.outputs.is_prerelease) && 'true' || 'false'}}
          updateOnlyUnreleased: true
